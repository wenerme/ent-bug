// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wenerme/ent-demo/ent/serviceaccount"
)

// ServiceAccountCreate is the builder for creating a ServiceAccount entity.
type ServiceAccountCreate struct {
	config
	mutation *ServiceAccountMutation
	hooks    []Hook
}

// SetSid sets the "sid" field.
func (sac *ServiceAccountCreate) SetSid(i int) *ServiceAccountCreate {
	sac.mutation.SetSid(i)
	return sac
}

// SetTid sets the "tid" field.
func (sac *ServiceAccountCreate) SetTid(i int) *ServiceAccountCreate {
	sac.mutation.SetTid(i)
	return sac
}

// SetDisplayName sets the "displayName" field.
func (sac *ServiceAccountCreate) SetDisplayName(s string) *ServiceAccountCreate {
	sac.mutation.SetDisplayName(s)
	return sac
}

// SetDisabled sets the "disabled" field.
func (sac *ServiceAccountCreate) SetDisabled(b bool) *ServiceAccountCreate {
	sac.mutation.SetDisabled(b)
	return sac
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (sac *ServiceAccountCreate) SetNillableDisabled(b *bool) *ServiceAccountCreate {
	if b != nil {
		sac.SetDisabled(*b)
	}
	return sac
}

// SetUsername sets the "username" field.
func (sac *ServiceAccountCreate) SetUsername(s string) *ServiceAccountCreate {
	sac.mutation.SetUsername(s)
	return sac
}

// SetPassword sets the "password" field.
func (sac *ServiceAccountCreate) SetPassword(s string) *ServiceAccountCreate {
	sac.mutation.SetPassword(s)
	return sac
}

// SetID sets the "id" field.
func (sac *ServiceAccountCreate) SetID(s string) *ServiceAccountCreate {
	sac.mutation.SetID(s)
	return sac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sac *ServiceAccountCreate) SetNillableID(s *string) *ServiceAccountCreate {
	if s != nil {
		sac.SetID(*s)
	}
	return sac
}

// Mutation returns the ServiceAccountMutation object of the builder.
func (sac *ServiceAccountCreate) Mutation() *ServiceAccountMutation {
	return sac.mutation
}

// Save creates the ServiceAccount in the database.
func (sac *ServiceAccountCreate) Save(ctx context.Context) (*ServiceAccount, error) {
	var (
		err  error
		node *ServiceAccount
	)
	sac.defaults()
	if len(sac.hooks) == 0 {
		if err = sac.check(); err != nil {
			return nil, err
		}
		node, err = sac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceAccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sac.check(); err != nil {
				return nil, err
			}
			sac.mutation = mutation
			if node, err = sac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sac.hooks) - 1; i >= 0; i-- {
			if sac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ServiceAccount)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ServiceAccountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sac *ServiceAccountCreate) SaveX(ctx context.Context) *ServiceAccount {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *ServiceAccountCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *ServiceAccountCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *ServiceAccountCreate) defaults() {
	if _, ok := sac.mutation.Disabled(); !ok {
		v := serviceaccount.DefaultDisabled
		sac.mutation.SetDisabled(v)
	}
	if _, ok := sac.mutation.ID(); !ok {
		v := serviceaccount.DefaultID()
		sac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sac *ServiceAccountCreate) check() error {
	if _, ok := sac.mutation.Sid(); !ok {
		return &ValidationError{Name: "sid", err: errors.New(`ent: missing required field "ServiceAccount.sid"`)}
	}
	if _, ok := sac.mutation.Tid(); !ok {
		return &ValidationError{Name: "tid", err: errors.New(`ent: missing required field "ServiceAccount.tid"`)}
	}
	if _, ok := sac.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "displayName", err: errors.New(`ent: missing required field "ServiceAccount.displayName"`)}
	}
	if v, ok := sac.mutation.DisplayName(); ok {
		if err := serviceaccount.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "displayName", err: fmt.Errorf(`ent: validator failed for field "ServiceAccount.displayName": %w`, err)}
		}
	}
	if _, ok := sac.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "ServiceAccount.disabled"`)}
	}
	if _, ok := sac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "ServiceAccount.username"`)}
	}
	if _, ok := sac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "ServiceAccount.password"`)}
	}
	return nil
}

func (sac *ServiceAccountCreate) sqlSave(ctx context.Context) (*ServiceAccount, error) {
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ServiceAccount.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (sac *ServiceAccountCreate) createSpec() (*ServiceAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceAccount{config: sac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: serviceaccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: serviceaccount.FieldID,
			},
		}
	)
	if id, ok := sac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sac.mutation.Sid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceaccount.FieldSid,
		})
		_node.Sid = value
	}
	if value, ok := sac.mutation.Tid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: serviceaccount.FieldTid,
		})
		_node.Tid = value
	}
	if value, ok := sac.mutation.DisplayName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceaccount.FieldDisplayName,
		})
		_node.DisplayName = value
	}
	if value, ok := sac.mutation.Disabled(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: serviceaccount.FieldDisabled,
		})
		_node.Disabled = value
	}
	if value, ok := sac.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceaccount.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := sac.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serviceaccount.FieldPassword,
		})
		_node.Password = value
	}
	return _node, _spec
}

// ServiceAccountCreateBulk is the builder for creating many ServiceAccount entities in bulk.
type ServiceAccountCreateBulk struct {
	config
	builders []*ServiceAccountCreate
}

// Save creates the ServiceAccount entities in the database.
func (sacb *ServiceAccountCreateBulk) Save(ctx context.Context) ([]*ServiceAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*ServiceAccount, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *ServiceAccountCreateBulk) SaveX(ctx context.Context) []*ServiceAccount {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *ServiceAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *ServiceAccountCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}
