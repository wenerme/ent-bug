// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/wenerme/ent-demo/ent/pet"
	"github.com/wenerme/ent-demo/ent/predicate"
	"github.com/wenerme/ent-demo/ent/serviceaccount"
	"github.com/wenerme/ent-demo/ent/user"
	"github.com/wenerme/ent-demo/models"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePet            = "Pet"
	TypeServiceAccount = "ServiceAccount"
	TypeUser           = "User"
)

// PetMutation represents an operation that mutates the Pet nodes in the graph.
type PetMutation struct {
	config
	op                Op
	typ               string
	id                *models.ID
	uid               *uuid.UUID
	ownerID           *models.ID
	ownerType         *string
	ownerUID          *uuid.UUID
	name              *string
	clearedFields     map[string]struct{}
	owningUser        *models.ID
	clearedowningUser bool
	done              bool
	oldValue          func(context.Context) (*Pet, error)
	predicates        []predicate.Pet
}

var _ ent.Mutation = (*PetMutation)(nil)

// petOption allows management of the mutation configuration using functional options.
type petOption func(*PetMutation)

// newPetMutation creates new mutation for the Pet entity.
func newPetMutation(c config, op Op, opts ...petOption) *PetMutation {
	m := &PetMutation{
		config:        c,
		op:            op,
		typ:           TypePet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPetID sets the ID field of the mutation.
func withPetID(id models.ID) petOption {
	return func(m *PetMutation) {
		var (
			err   error
			once  sync.Once
			value *Pet
		)
		m.oldValue = func(ctx context.Context) (*Pet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Pet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPet sets the old Pet of the mutation.
func withPet(node *Pet) petOption {
	return func(m *PetMutation) {
		m.oldValue = func(context.Context) (*Pet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Pet entities.
func (m *PetMutation) SetID(id models.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PetMutation) ID() (id models.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PetMutation) IDs(ctx context.Context) ([]models.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []models.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Pet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUID sets the "uid" field.
func (m *PetMutation) SetUID(u uuid.UUID) {
	m.uid = &u
}

// UID returns the value of the "uid" field in the mutation.
func (m *PetMutation) UID() (r uuid.UUID, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ResetUID resets all changes to the "uid" field.
func (m *PetMutation) ResetUID() {
	m.uid = nil
}

// SetOwnerID sets the "ownerID" field.
func (m *PetMutation) SetOwnerID(value models.ID) {
	m.ownerID = &value
}

// OwnerID returns the value of the "ownerID" field in the mutation.
func (m *PetMutation) OwnerID() (r models.ID, exists bool) {
	v := m.ownerID
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "ownerID" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldOwnerID(ctx context.Context) (v *models.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ClearOwnerID clears the value of the "ownerID" field.
func (m *PetMutation) ClearOwnerID() {
	m.ownerID = nil
	m.clearedFields[pet.FieldOwnerID] = struct{}{}
}

// OwnerIDCleared returns if the "ownerID" field was cleared in this mutation.
func (m *PetMutation) OwnerIDCleared() bool {
	_, ok := m.clearedFields[pet.FieldOwnerID]
	return ok
}

// ResetOwnerID resets all changes to the "ownerID" field.
func (m *PetMutation) ResetOwnerID() {
	m.ownerID = nil
	delete(m.clearedFields, pet.FieldOwnerID)
}

// SetOwnerType sets the "ownerType" field.
func (m *PetMutation) SetOwnerType(s string) {
	m.ownerType = &s
}

// OwnerType returns the value of the "ownerType" field in the mutation.
func (m *PetMutation) OwnerType() (r string, exists bool) {
	v := m.ownerType
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerType returns the old "ownerType" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldOwnerType(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerType: %w", err)
	}
	return oldValue.OwnerType, nil
}

// ClearOwnerType clears the value of the "ownerType" field.
func (m *PetMutation) ClearOwnerType() {
	m.ownerType = nil
	m.clearedFields[pet.FieldOwnerType] = struct{}{}
}

// OwnerTypeCleared returns if the "ownerType" field was cleared in this mutation.
func (m *PetMutation) OwnerTypeCleared() bool {
	_, ok := m.clearedFields[pet.FieldOwnerType]
	return ok
}

// ResetOwnerType resets all changes to the "ownerType" field.
func (m *PetMutation) ResetOwnerType() {
	m.ownerType = nil
	delete(m.clearedFields, pet.FieldOwnerType)
}

// SetOwningUserID sets the "owningUserID" field.
func (m *PetMutation) SetOwningUserID(value models.ID) {
	m.owningUser = &value
}

// OwningUserID returns the value of the "owningUserID" field in the mutation.
func (m *PetMutation) OwningUserID() (r models.ID, exists bool) {
	v := m.owningUser
	if v == nil {
		return
	}
	return *v, true
}

// OldOwningUserID returns the old "owningUserID" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldOwningUserID(ctx context.Context) (v *models.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwningUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwningUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwningUserID: %w", err)
	}
	return oldValue.OwningUserID, nil
}

// ClearOwningUserID clears the value of the "owningUserID" field.
func (m *PetMutation) ClearOwningUserID() {
	m.owningUser = nil
	m.clearedFields[pet.FieldOwningUserID] = struct{}{}
}

// OwningUserIDCleared returns if the "owningUserID" field was cleared in this mutation.
func (m *PetMutation) OwningUserIDCleared() bool {
	_, ok := m.clearedFields[pet.FieldOwningUserID]
	return ok
}

// ResetOwningUserID resets all changes to the "owningUserID" field.
func (m *PetMutation) ResetOwningUserID() {
	m.owningUser = nil
	delete(m.clearedFields, pet.FieldOwningUserID)
}

// SetOwnerUID sets the "ownerUID" field.
func (m *PetMutation) SetOwnerUID(u uuid.UUID) {
	m.ownerUID = &u
}

// OwnerUID returns the value of the "ownerUID" field in the mutation.
func (m *PetMutation) OwnerUID() (r uuid.UUID, exists bool) {
	v := m.ownerUID
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerUID returns the old "ownerUID" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldOwnerUID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerUID: %w", err)
	}
	return oldValue.OwnerUID, nil
}

// ClearOwnerUID clears the value of the "ownerUID" field.
func (m *PetMutation) ClearOwnerUID() {
	m.ownerUID = nil
	m.clearedFields[pet.FieldOwnerUID] = struct{}{}
}

// OwnerUIDCleared returns if the "ownerUID" field was cleared in this mutation.
func (m *PetMutation) OwnerUIDCleared() bool {
	_, ok := m.clearedFields[pet.FieldOwnerUID]
	return ok
}

// ResetOwnerUID resets all changes to the "ownerUID" field.
func (m *PetMutation) ResetOwnerUID() {
	m.ownerUID = nil
	delete(m.clearedFields, pet.FieldOwnerUID)
}

// SetName sets the "name" field.
func (m *PetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Pet entity.
// If the Pet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PetMutation) ResetName() {
	m.name = nil
}

// ClearOwningUser clears the "owningUser" edge to the User entity.
func (m *PetMutation) ClearOwningUser() {
	m.clearedowningUser = true
}

// OwningUserCleared reports if the "owningUser" edge to the User entity was cleared.
func (m *PetMutation) OwningUserCleared() bool {
	return m.OwningUserIDCleared() || m.clearedowningUser
}

// OwningUserIDs returns the "owningUser" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwningUserID instead. It exists only for internal usage by the builders.
func (m *PetMutation) OwningUserIDs() (ids []models.ID) {
	if id := m.owningUser; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwningUser resets all changes to the "owningUser" edge.
func (m *PetMutation) ResetOwningUser() {
	m.owningUser = nil
	m.clearedowningUser = false
}

// Where appends a list predicates to the PetMutation builder.
func (m *PetMutation) Where(ps ...predicate.Pet) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PetMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Pet).
func (m *PetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PetMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.uid != nil {
		fields = append(fields, pet.FieldUID)
	}
	if m.ownerID != nil {
		fields = append(fields, pet.FieldOwnerID)
	}
	if m.ownerType != nil {
		fields = append(fields, pet.FieldOwnerType)
	}
	if m.owningUser != nil {
		fields = append(fields, pet.FieldOwningUserID)
	}
	if m.ownerUID != nil {
		fields = append(fields, pet.FieldOwnerUID)
	}
	if m.name != nil {
		fields = append(fields, pet.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pet.FieldUID:
		return m.UID()
	case pet.FieldOwnerID:
		return m.OwnerID()
	case pet.FieldOwnerType:
		return m.OwnerType()
	case pet.FieldOwningUserID:
		return m.OwningUserID()
	case pet.FieldOwnerUID:
		return m.OwnerUID()
	case pet.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pet.FieldUID:
		return m.OldUID(ctx)
	case pet.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case pet.FieldOwnerType:
		return m.OldOwnerType(ctx)
	case pet.FieldOwningUserID:
		return m.OldOwningUserID(ctx)
	case pet.FieldOwnerUID:
		return m.OldOwnerUID(ctx)
	case pet.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Pet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pet.FieldUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case pet.FieldOwnerID:
		v, ok := value.(models.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case pet.FieldOwnerType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerType(v)
		return nil
	case pet.FieldOwningUserID:
		v, ok := value.(models.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwningUserID(v)
		return nil
	case pet.FieldOwnerUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerUID(v)
		return nil
	case pet.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Pet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Pet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(pet.FieldOwnerID) {
		fields = append(fields, pet.FieldOwnerID)
	}
	if m.FieldCleared(pet.FieldOwnerType) {
		fields = append(fields, pet.FieldOwnerType)
	}
	if m.FieldCleared(pet.FieldOwningUserID) {
		fields = append(fields, pet.FieldOwningUserID)
	}
	if m.FieldCleared(pet.FieldOwnerUID) {
		fields = append(fields, pet.FieldOwnerUID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PetMutation) ClearField(name string) error {
	switch name {
	case pet.FieldOwnerID:
		m.ClearOwnerID()
		return nil
	case pet.FieldOwnerType:
		m.ClearOwnerType()
		return nil
	case pet.FieldOwningUserID:
		m.ClearOwningUserID()
		return nil
	case pet.FieldOwnerUID:
		m.ClearOwnerUID()
		return nil
	}
	return fmt.Errorf("unknown Pet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PetMutation) ResetField(name string) error {
	switch name {
	case pet.FieldUID:
		m.ResetUID()
		return nil
	case pet.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case pet.FieldOwnerType:
		m.ResetOwnerType()
		return nil
	case pet.FieldOwningUserID:
		m.ResetOwningUserID()
		return nil
	case pet.FieldOwnerUID:
		m.ResetOwnerUID()
		return nil
	case pet.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Pet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owningUser != nil {
		edges = append(edges, pet.EdgeOwningUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pet.EdgeOwningUser:
		if id := m.owningUser; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowningUser {
		edges = append(edges, pet.EdgeOwningUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PetMutation) EdgeCleared(name string) bool {
	switch name {
	case pet.EdgeOwningUser:
		return m.clearedowningUser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PetMutation) ClearEdge(name string) error {
	switch name {
	case pet.EdgeOwningUser:
		m.ClearOwningUser()
		return nil
	}
	return fmt.Errorf("unknown Pet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PetMutation) ResetEdge(name string) error {
	switch name {
	case pet.EdgeOwningUser:
		m.ResetOwningUser()
		return nil
	}
	return fmt.Errorf("unknown Pet edge %s", name)
}

// ServiceAccountMutation represents an operation that mutates the ServiceAccount nodes in the graph.
type ServiceAccountMutation struct {
	config
	op            Op
	typ           string
	id            *string
	sid           *int
	addsid        *int
	tid           *int
	addtid        *int
	displayName   *string
	disabled      *bool
	username      *string
	password      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ServiceAccount, error)
	predicates    []predicate.ServiceAccount
}

var _ ent.Mutation = (*ServiceAccountMutation)(nil)

// serviceaccountOption allows management of the mutation configuration using functional options.
type serviceaccountOption func(*ServiceAccountMutation)

// newServiceAccountMutation creates new mutation for the ServiceAccount entity.
func newServiceAccountMutation(c config, op Op, opts ...serviceaccountOption) *ServiceAccountMutation {
	m := &ServiceAccountMutation{
		config:        c,
		op:            op,
		typ:           TypeServiceAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServiceAccountID sets the ID field of the mutation.
func withServiceAccountID(id string) serviceaccountOption {
	return func(m *ServiceAccountMutation) {
		var (
			err   error
			once  sync.Once
			value *ServiceAccount
		)
		m.oldValue = func(ctx context.Context) (*ServiceAccount, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ServiceAccount.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withServiceAccount sets the old ServiceAccount of the mutation.
func withServiceAccount(node *ServiceAccount) serviceaccountOption {
	return func(m *ServiceAccountMutation) {
		m.oldValue = func(context.Context) (*ServiceAccount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServiceAccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServiceAccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ServiceAccount entities.
func (m *ServiceAccountMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServiceAccountMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServiceAccountMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ServiceAccount.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSid sets the "sid" field.
func (m *ServiceAccountMutation) SetSid(i int) {
	m.sid = &i
	m.addsid = nil
}

// Sid returns the value of the "sid" field in the mutation.
func (m *ServiceAccountMutation) Sid() (r int, exists bool) {
	v := m.sid
	if v == nil {
		return
	}
	return *v, true
}

// OldSid returns the old "sid" field's value of the ServiceAccount entity.
// If the ServiceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceAccountMutation) OldSid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSid: %w", err)
	}
	return oldValue.Sid, nil
}

// AddSid adds i to the "sid" field.
func (m *ServiceAccountMutation) AddSid(i int) {
	if m.addsid != nil {
		*m.addsid += i
	} else {
		m.addsid = &i
	}
}

// AddedSid returns the value that was added to the "sid" field in this mutation.
func (m *ServiceAccountMutation) AddedSid() (r int, exists bool) {
	v := m.addsid
	if v == nil {
		return
	}
	return *v, true
}

// ResetSid resets all changes to the "sid" field.
func (m *ServiceAccountMutation) ResetSid() {
	m.sid = nil
	m.addsid = nil
}

// SetTid sets the "tid" field.
func (m *ServiceAccountMutation) SetTid(i int) {
	m.tid = &i
	m.addtid = nil
}

// Tid returns the value of the "tid" field in the mutation.
func (m *ServiceAccountMutation) Tid() (r int, exists bool) {
	v := m.tid
	if v == nil {
		return
	}
	return *v, true
}

// OldTid returns the old "tid" field's value of the ServiceAccount entity.
// If the ServiceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceAccountMutation) OldTid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTid: %w", err)
	}
	return oldValue.Tid, nil
}

// AddTid adds i to the "tid" field.
func (m *ServiceAccountMutation) AddTid(i int) {
	if m.addtid != nil {
		*m.addtid += i
	} else {
		m.addtid = &i
	}
}

// AddedTid returns the value that was added to the "tid" field in this mutation.
func (m *ServiceAccountMutation) AddedTid() (r int, exists bool) {
	v := m.addtid
	if v == nil {
		return
	}
	return *v, true
}

// ResetTid resets all changes to the "tid" field.
func (m *ServiceAccountMutation) ResetTid() {
	m.tid = nil
	m.addtid = nil
}

// SetDisplayName sets the "displayName" field.
func (m *ServiceAccountMutation) SetDisplayName(s string) {
	m.displayName = &s
}

// DisplayName returns the value of the "displayName" field in the mutation.
func (m *ServiceAccountMutation) DisplayName() (r string, exists bool) {
	v := m.displayName
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "displayName" field's value of the ServiceAccount entity.
// If the ServiceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceAccountMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "displayName" field.
func (m *ServiceAccountMutation) ResetDisplayName() {
	m.displayName = nil
}

// SetDisabled sets the "disabled" field.
func (m *ServiceAccountMutation) SetDisabled(b bool) {
	m.disabled = &b
}

// Disabled returns the value of the "disabled" field in the mutation.
func (m *ServiceAccountMutation) Disabled() (r bool, exists bool) {
	v := m.disabled
	if v == nil {
		return
	}
	return *v, true
}

// OldDisabled returns the old "disabled" field's value of the ServiceAccount entity.
// If the ServiceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceAccountMutation) OldDisabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisabled: %w", err)
	}
	return oldValue.Disabled, nil
}

// ResetDisabled resets all changes to the "disabled" field.
func (m *ServiceAccountMutation) ResetDisabled() {
	m.disabled = nil
}

// SetUsername sets the "username" field.
func (m *ServiceAccountMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *ServiceAccountMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the ServiceAccount entity.
// If the ServiceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceAccountMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *ServiceAccountMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *ServiceAccountMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *ServiceAccountMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the ServiceAccount entity.
// If the ServiceAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceAccountMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *ServiceAccountMutation) ResetPassword() {
	m.password = nil
}

// Where appends a list predicates to the ServiceAccountMutation builder.
func (m *ServiceAccountMutation) Where(ps ...predicate.ServiceAccount) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ServiceAccountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ServiceAccount).
func (m *ServiceAccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServiceAccountMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.sid != nil {
		fields = append(fields, serviceaccount.FieldSid)
	}
	if m.tid != nil {
		fields = append(fields, serviceaccount.FieldTid)
	}
	if m.displayName != nil {
		fields = append(fields, serviceaccount.FieldDisplayName)
	}
	if m.disabled != nil {
		fields = append(fields, serviceaccount.FieldDisabled)
	}
	if m.username != nil {
		fields = append(fields, serviceaccount.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, serviceaccount.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServiceAccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case serviceaccount.FieldSid:
		return m.Sid()
	case serviceaccount.FieldTid:
		return m.Tid()
	case serviceaccount.FieldDisplayName:
		return m.DisplayName()
	case serviceaccount.FieldDisabled:
		return m.Disabled()
	case serviceaccount.FieldUsername:
		return m.Username()
	case serviceaccount.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServiceAccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case serviceaccount.FieldSid:
		return m.OldSid(ctx)
	case serviceaccount.FieldTid:
		return m.OldTid(ctx)
	case serviceaccount.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case serviceaccount.FieldDisabled:
		return m.OldDisabled(ctx)
	case serviceaccount.FieldUsername:
		return m.OldUsername(ctx)
	case serviceaccount.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown ServiceAccount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceAccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case serviceaccount.FieldSid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSid(v)
		return nil
	case serviceaccount.FieldTid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTid(v)
		return nil
	case serviceaccount.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case serviceaccount.FieldDisabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisabled(v)
		return nil
	case serviceaccount.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case serviceaccount.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown ServiceAccount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServiceAccountMutation) AddedFields() []string {
	var fields []string
	if m.addsid != nil {
		fields = append(fields, serviceaccount.FieldSid)
	}
	if m.addtid != nil {
		fields = append(fields, serviceaccount.FieldTid)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServiceAccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case serviceaccount.FieldSid:
		return m.AddedSid()
	case serviceaccount.FieldTid:
		return m.AddedTid()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceAccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case serviceaccount.FieldSid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSid(v)
		return nil
	case serviceaccount.FieldTid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTid(v)
		return nil
	}
	return fmt.Errorf("unknown ServiceAccount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServiceAccountMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServiceAccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServiceAccountMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ServiceAccount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServiceAccountMutation) ResetField(name string) error {
	switch name {
	case serviceaccount.FieldSid:
		m.ResetSid()
		return nil
	case serviceaccount.FieldTid:
		m.ResetTid()
		return nil
	case serviceaccount.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case serviceaccount.FieldDisabled:
		m.ResetDisabled()
		return nil
	case serviceaccount.FieldUsername:
		m.ResetUsername()
		return nil
	case serviceaccount.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown ServiceAccount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServiceAccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServiceAccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServiceAccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServiceAccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServiceAccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServiceAccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServiceAccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ServiceAccount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServiceAccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ServiceAccount edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *models.ID
	uid           *uuid.UUID
	name          *string
	birth         *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id models.ID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id models.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id models.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]models.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []models.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUID sets the "uid" field.
func (m *UserMutation) SetUID(u uuid.UUID) {
	m.uid = &u
}

// UID returns the value of the "uid" field in the mutation.
func (m *UserMutation) UID() (r uuid.UUID, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ResetUID resets all changes to the "uid" field.
func (m *UserMutation) ResetUID() {
	m.uid = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetBirth sets the "birth" field.
func (m *UserMutation) SetBirth(t time.Time) {
	m.birth = &t
}

// Birth returns the value of the "birth" field in the mutation.
func (m *UserMutation) Birth() (r time.Time, exists bool) {
	v := m.birth
	if v == nil {
		return
	}
	return *v, true
}

// OldBirth returns the old "birth" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBirth(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirth: %w", err)
	}
	return oldValue.Birth, nil
}

// ClearBirth clears the value of the "birth" field.
func (m *UserMutation) ClearBirth() {
	m.birth = nil
	m.clearedFields[user.FieldBirth] = struct{}{}
}

// BirthCleared returns if the "birth" field was cleared in this mutation.
func (m *UserMutation) BirthCleared() bool {
	_, ok := m.clearedFields[user.FieldBirth]
	return ok
}

// ResetBirth resets all changes to the "birth" field.
func (m *UserMutation) ResetBirth() {
	m.birth = nil
	delete(m.clearedFields, user.FieldBirth)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.uid != nil {
		fields = append(fields, user.FieldUID)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.birth != nil {
		fields = append(fields, user.FieldBirth)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUID:
		return m.UID()
	case user.FieldName:
		return m.Name()
	case user.FieldBirth:
		return m.Birth()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUID:
		return m.OldUID(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldBirth:
		return m.OldBirth(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldBirth:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirth(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldBirth) {
		fields = append(fields, user.FieldBirth)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldBirth:
		m.ClearBirth()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUID:
		m.ResetUID()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldBirth:
		m.ResetBirth()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
