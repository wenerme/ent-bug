// Code generated by ent, DO NOT EDIT.

package pet

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/wenerme/ent-demo/ent/predicate"
	"github.com/wenerme/ent-demo/models"
)

// ID filters vertices based on their ID field.
func ID(id models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// OwnerID applies equality check predicate on the "ownerID" field. It's identical to OwnerIDEQ.
func OwnerID(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// OwnerType applies equality check predicate on the "ownerType" field. It's identical to OwnerTypeEQ.
func OwnerType(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerType), v))
	})
}

// OwningUserID applies equality check predicate on the "owningUserID" field. It's identical to OwningUserIDEQ.
func OwningUserID(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwningUserID), v))
	})
}

// OwnerUID applies equality check predicate on the "ownerUID" field. It's identical to OwnerUIDEQ.
func OwnerUID(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerUID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUID), v))
	})
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUID), v))
	})
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...uuid.UUID) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUID), v...))
	})
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...uuid.UUID) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUID), v...))
	})
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUID), v))
	})
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUID), v))
	})
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUID), v))
	})
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUID), v))
	})
}

// OwnerIDEQ applies the EQ predicate on the "ownerID" field.
func OwnerIDEQ(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDNEQ applies the NEQ predicate on the "ownerID" field.
func OwnerIDNEQ(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerID), v))
	})
}

// OwnerIDIn applies the In predicate on the "ownerID" field.
func OwnerIDIn(vs ...models.ID) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDNotIn applies the NotIn predicate on the "ownerID" field.
func OwnerIDNotIn(vs ...models.ID) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOwnerID), v...))
	})
}

// OwnerIDGT applies the GT predicate on the "ownerID" field.
func OwnerIDGT(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerID), v))
	})
}

// OwnerIDGTE applies the GTE predicate on the "ownerID" field.
func OwnerIDGTE(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerID), v))
	})
}

// OwnerIDLT applies the LT predicate on the "ownerID" field.
func OwnerIDLT(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerID), v))
	})
}

// OwnerIDLTE applies the LTE predicate on the "ownerID" field.
func OwnerIDLTE(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerID), v))
	})
}

// OwnerIDContains applies the Contains predicate on the "ownerID" field.
func OwnerIDContains(v models.ID) predicate.Pet {
	vc := string(v)
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwnerID), vc))
	})
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "ownerID" field.
func OwnerIDHasPrefix(v models.ID) predicate.Pet {
	vc := string(v)
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwnerID), vc))
	})
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "ownerID" field.
func OwnerIDHasSuffix(v models.ID) predicate.Pet {
	vc := string(v)
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwnerID), vc))
	})
}

// OwnerIDIsNil applies the IsNil predicate on the "ownerID" field.
func OwnerIDIsNil() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOwnerID)))
	})
}

// OwnerIDNotNil applies the NotNil predicate on the "ownerID" field.
func OwnerIDNotNil() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOwnerID)))
	})
}

// OwnerIDEqualFold applies the EqualFold predicate on the "ownerID" field.
func OwnerIDEqualFold(v models.ID) predicate.Pet {
	vc := string(v)
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwnerID), vc))
	})
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "ownerID" field.
func OwnerIDContainsFold(v models.ID) predicate.Pet {
	vc := string(v)
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwnerID), vc))
	})
}

// OwnerTypeEQ applies the EQ predicate on the "ownerType" field.
func OwnerTypeEQ(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerType), v))
	})
}

// OwnerTypeNEQ applies the NEQ predicate on the "ownerType" field.
func OwnerTypeNEQ(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerType), v))
	})
}

// OwnerTypeIn applies the In predicate on the "ownerType" field.
func OwnerTypeIn(vs ...string) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOwnerType), v...))
	})
}

// OwnerTypeNotIn applies the NotIn predicate on the "ownerType" field.
func OwnerTypeNotIn(vs ...string) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOwnerType), v...))
	})
}

// OwnerTypeGT applies the GT predicate on the "ownerType" field.
func OwnerTypeGT(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerType), v))
	})
}

// OwnerTypeGTE applies the GTE predicate on the "ownerType" field.
func OwnerTypeGTE(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerType), v))
	})
}

// OwnerTypeLT applies the LT predicate on the "ownerType" field.
func OwnerTypeLT(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerType), v))
	})
}

// OwnerTypeLTE applies the LTE predicate on the "ownerType" field.
func OwnerTypeLTE(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerType), v))
	})
}

// OwnerTypeContains applies the Contains predicate on the "ownerType" field.
func OwnerTypeContains(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwnerType), v))
	})
}

// OwnerTypeHasPrefix applies the HasPrefix predicate on the "ownerType" field.
func OwnerTypeHasPrefix(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwnerType), v))
	})
}

// OwnerTypeHasSuffix applies the HasSuffix predicate on the "ownerType" field.
func OwnerTypeHasSuffix(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwnerType), v))
	})
}

// OwnerTypeIsNil applies the IsNil predicate on the "ownerType" field.
func OwnerTypeIsNil() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOwnerType)))
	})
}

// OwnerTypeNotNil applies the NotNil predicate on the "ownerType" field.
func OwnerTypeNotNil() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOwnerType)))
	})
}

// OwnerTypeEqualFold applies the EqualFold predicate on the "ownerType" field.
func OwnerTypeEqualFold(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwnerType), v))
	})
}

// OwnerTypeContainsFold applies the ContainsFold predicate on the "ownerType" field.
func OwnerTypeContainsFold(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwnerType), v))
	})
}

// OwningUserIDEQ applies the EQ predicate on the "owningUserID" field.
func OwningUserIDEQ(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwningUserID), v))
	})
}

// OwningUserIDNEQ applies the NEQ predicate on the "owningUserID" field.
func OwningUserIDNEQ(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwningUserID), v))
	})
}

// OwningUserIDIn applies the In predicate on the "owningUserID" field.
func OwningUserIDIn(vs ...models.ID) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOwningUserID), v...))
	})
}

// OwningUserIDNotIn applies the NotIn predicate on the "owningUserID" field.
func OwningUserIDNotIn(vs ...models.ID) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOwningUserID), v...))
	})
}

// OwningUserIDGT applies the GT predicate on the "owningUserID" field.
func OwningUserIDGT(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwningUserID), v))
	})
}

// OwningUserIDGTE applies the GTE predicate on the "owningUserID" field.
func OwningUserIDGTE(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwningUserID), v))
	})
}

// OwningUserIDLT applies the LT predicate on the "owningUserID" field.
func OwningUserIDLT(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwningUserID), v))
	})
}

// OwningUserIDLTE applies the LTE predicate on the "owningUserID" field.
func OwningUserIDLTE(v models.ID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwningUserID), v))
	})
}

// OwningUserIDContains applies the Contains predicate on the "owningUserID" field.
func OwningUserIDContains(v models.ID) predicate.Pet {
	vc := string(v)
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOwningUserID), vc))
	})
}

// OwningUserIDHasPrefix applies the HasPrefix predicate on the "owningUserID" field.
func OwningUserIDHasPrefix(v models.ID) predicate.Pet {
	vc := string(v)
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOwningUserID), vc))
	})
}

// OwningUserIDHasSuffix applies the HasSuffix predicate on the "owningUserID" field.
func OwningUserIDHasSuffix(v models.ID) predicate.Pet {
	vc := string(v)
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOwningUserID), vc))
	})
}

// OwningUserIDIsNil applies the IsNil predicate on the "owningUserID" field.
func OwningUserIDIsNil() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOwningUserID)))
	})
}

// OwningUserIDNotNil applies the NotNil predicate on the "owningUserID" field.
func OwningUserIDNotNil() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOwningUserID)))
	})
}

// OwningUserIDEqualFold applies the EqualFold predicate on the "owningUserID" field.
func OwningUserIDEqualFold(v models.ID) predicate.Pet {
	vc := string(v)
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOwningUserID), vc))
	})
}

// OwningUserIDContainsFold applies the ContainsFold predicate on the "owningUserID" field.
func OwningUserIDContainsFold(v models.ID) predicate.Pet {
	vc := string(v)
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOwningUserID), vc))
	})
}

// OwnerUIDEQ applies the EQ predicate on the "ownerUID" field.
func OwnerUIDEQ(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOwnerUID), v))
	})
}

// OwnerUIDNEQ applies the NEQ predicate on the "ownerUID" field.
func OwnerUIDNEQ(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOwnerUID), v))
	})
}

// OwnerUIDIn applies the In predicate on the "ownerUID" field.
func OwnerUIDIn(vs ...uuid.UUID) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOwnerUID), v...))
	})
}

// OwnerUIDNotIn applies the NotIn predicate on the "ownerUID" field.
func OwnerUIDNotIn(vs ...uuid.UUID) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOwnerUID), v...))
	})
}

// OwnerUIDGT applies the GT predicate on the "ownerUID" field.
func OwnerUIDGT(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOwnerUID), v))
	})
}

// OwnerUIDGTE applies the GTE predicate on the "ownerUID" field.
func OwnerUIDGTE(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOwnerUID), v))
	})
}

// OwnerUIDLT applies the LT predicate on the "ownerUID" field.
func OwnerUIDLT(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOwnerUID), v))
	})
}

// OwnerUIDLTE applies the LTE predicate on the "ownerUID" field.
func OwnerUIDLTE(v uuid.UUID) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOwnerUID), v))
	})
}

// OwnerUIDIsNil applies the IsNil predicate on the "ownerUID" field.
func OwnerUIDIsNil() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOwnerUID)))
	})
}

// OwnerUIDNotNil applies the NotNil predicate on the "ownerUID" field.
func OwnerUIDNotNil() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOwnerUID)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Pet {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pet(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// HasOwningUser applies the HasEdge predicate on the "owningUser" edge.
func HasOwningUser() predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwningUserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OwningUserTable, OwningUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwningUserWith applies the HasEdge predicate on the "owningUser" edge with a given conditions (other predicates).
func HasOwningUserWith(preds ...predicate.User) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwningUserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OwningUserTable, OwningUserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pet) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pet) predicate.Pet {
	return predicate.Pet(func(s *sql.Selector) {
		p(s.Not())
	})
}
