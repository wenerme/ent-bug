// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/wenerme/ent-demo/ent/serviceaccount"
)

// ServiceAccount is the model entity for the ServiceAccount schema.
type ServiceAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// DisplayName holds the value of the "displayName" field.
	DisplayName string `json:"displayName,omitempty"`
	// Disabled holds the value of the "disabled" field.
	Disabled bool `json:"disabled,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceAccount) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceaccount.FieldDisabled:
			values[i] = new(sql.NullBool)
		case serviceaccount.FieldID, serviceaccount.FieldDisplayName, serviceaccount.FieldUsername, serviceaccount.FieldPassword:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServiceAccount", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceAccount fields.
func (sa *ServiceAccount) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceaccount.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sa.ID = value.String
			}
		case serviceaccount.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field displayName", values[i])
			} else if value.Valid {
				sa.DisplayName = value.String
			}
		case serviceaccount.FieldDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disabled", values[i])
			} else if value.Valid {
				sa.Disabled = value.Bool
			}
		case serviceaccount.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				sa.Username = value.String
			}
		case serviceaccount.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				sa.Password = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ServiceAccount.
// Note that you need to call ServiceAccount.Unwrap() before calling this method if this ServiceAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (sa *ServiceAccount) Update() *ServiceAccountUpdateOne {
	return (&ServiceAccountClient{config: sa.config}).UpdateOne(sa)
}

// Unwrap unwraps the ServiceAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sa *ServiceAccount) Unwrap() *ServiceAccount {
	_tx, ok := sa.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceAccount is not a transactional entity")
	}
	sa.config.driver = _tx.drv
	return sa
}

// String implements the fmt.Stringer.
func (sa *ServiceAccount) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sa.ID))
	builder.WriteString("displayName=")
	builder.WriteString(sa.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("disabled=")
	builder.WriteString(fmt.Sprintf("%v", sa.Disabled))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(sa.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(sa.Password)
	builder.WriteByte(')')
	return builder.String()
}

// ServiceAccounts is a parsable slice of ServiceAccount.
type ServiceAccounts []*ServiceAccount

func (sa ServiceAccounts) config(cfg config) {
	for _i := range sa {
		sa[_i].config = cfg
	}
}
